mixin slide(classNames)
  if classNames
    section(class=classNames, data-bespoke-backdrop='backdrop ' + classNames.split(' ').map(function(className) { return 'backdrop--' + className; }).join(' '))
      block
  else
    section
      block

doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Vega.js - Construyendo gráficas en minutos

    link(rel='stylesheet', type='text/css', href='build/build.css')
    link(href='https://fonts.googleapis.com/css?family=Roboto+Slab:400,700', rel='stylesheet', type='text/css')

  body

    article

      +slide('purple')
        h1.tachado
          | Node.js is dead, long live Node.js
          br
        h1
          span.subtitle Vega.js - Building charts in minutes
        h3
          | Jaime Andrés García
          br
          | Analytic Board
          br
          | Medellín, 16 de Septiembre de 2015
      +slide('blue cascade')
        h2 Why Vega.js?
        h3 Support fast and customizable design
        h3 Make visualizations more reusable and shareable
        h3 Enable programmatic generation of visualizations
        h3 Improve performance and platform flexibility
      +slide('black cascade')
        h1 SVG - Canvas - WebGL
        img(src="images/svg-vs-canvas-vs-webgl.png",width="66%")
        a(href="https://jonobr1.github.io/two.js/examples/particle-sandbox.html",target="_blank") Testing SVG - Canvas - WebGL
      +slide('blue cascade')
        h2 Step 1 - Acquiring the data
        a(href="https://github.com/nodejs/node/blob/master/CHANGELOG.md",target="_blank") Node.js Changelog
        a(href="http://www.w3.org/2003/12/semantic-extractor.html",target="_blank") Extract Semantic
      +slide('cascade')
        h2 Step 2 - Installing vega.js
        pre.language-javascript
          code.
            bower install d3 vega
            or
            npm install d3 vega
      +slide('cascade')
        h2 Step 3 - Calling vega
        pre.language-javascript
          code.
            function parse(spec,id) {
              vg.parse.spec(spec, function(chart) {
                var view = chart({ el:id });
                view.viewport(null)
                  .renderer("svg")
                  .update();
              });
            }
            parse("charts/chart.json","#vis");
      +slide('cascade')
        h2 Step 4 - Visualization
        pre.language-javascript
          code.
            "width": 800,
            "height": 300,
            "padding": {"top": 10, "left": 30, "bottom": 30, "right": 10},
            "data": [
              {
                "name": "table",
                "url": "data/data.csv",
                "format": {
                  "type": "csv",
                  "parse": {
                    "date": "date"
                  }
                }
              }
            ]
      +slide('cascade')
        h2 Step 5 - Scales
        pre.language-javascript
          code.
            "scales": [
              {
                "name": "x",
                "type": "time",
                "range": "width",
                "domain": {"data": "table", "field": "date"}
              },
              {
                "name": "y",
                "type": "log",
                "range": "height",
                "domain": {"data": "table", "field": "version"}
              }
            ]
      +slide('cascade')
        h2 Step 6 - Axes
        pre.language-javascript
          code.
            "axes": [
              {"type": "x", "scale": "x"},
              {"type": "y", "scale": "y"}
            ]
      +slide('cascade')
        h2 Step 7 - Marks
        pre.language-javascript
          code.
            "marks": [
              {
                "type": "symbol",
                "from": {"data": "table"},
                "properties": {
                  "enter": {
                    "x": {"scale": "x", "field": "date"},
                    "y": {"scale": "y", "field": "version"},
                    "stroke": {"value": "#80bd01"},
                    "fill": {"value": "#80bd01"}
                  },
                  "update": {
                    "size": {"value": 10},
                    "fillOpacity": {"value": 1}
                  },
                  "hover": {
                    "size": {"value": 40},
                    "fillOpacity": {"value": 0.5}
                  }
                }
              }
            ]
      +slide('cascade')
        h1 Result - Node versions
        #vis
      +slide('caught')
        .tint
          h1 There is a missing part in the story
      +slide('applause')
        .tint
          h1 IO.js
      +slide('cascade')
        h2 Step 9 - Marks Groups
        pre.language-javascript
          code.
            {
              "type": "group",
              "from": {
                "data": "nodeversions",
                "transform": [{"type": "facet", "groupby": ["engine"]}]
              },
              "marks": [
                {
                  "type": "symbol",
                  "properties": {
                    "enter": {
                      "x": {"scale": "x", "field": "date"},
                      "y": {"scale": "y", "field": "version"},
                      "fill": {"scale": "color", "field": "engine"},
                      "stroke": {"scale": "color", "field": "engine"}
                    },
                    "update": {
                      "size": {"value": 15},
                      "fillOpacity": {"value": 1}
                    },
                    "hover": {
                      "size": {"value": 40},
                      "fillOpacity": {"value": 0.5}
                    }
                  }
                }
      +slide('cascade')
        h2 Step 10 - Text Marks in specific dates
        pre.language-javascript
          code.
            {
              "type": "text",
              "from": {
                "transform": [{"type": "filter", "test": "datum.date == time('2015-01-14')"}]
              },
              "properties": {
                "enter": {
                  "x": {"scale": "x", "field": "date", "offset": -20},
                  "y": {"scale": "y", "field": "version"},
                  "fill": {"scale": "color", "field": "engine"},
                  "text": {"field": "engine"},
                  "baseline": {"value": "middle"}
                }
              }
            }
      +slide('cascade')
        h2 Step 11 - Tooltip - Signals
        pre.language-javascript
          code.
            "signals": [
              {
                "name": "tooltip",
                "init": {"expr": "{date:time('2009-06-11'),version:0.3}"},
                "streams": [
                  {"type": "symbol:mouseover", "expr": "datum"},
                  {"type": "symbol:mouseout", "expr": "{}"}
                ],
                "transform": [
                  {"type": "sort", "by": "orginalversion"}
                ]
              }
            ]
      +slide('cascade')
        h2 Step 12 - Tooltip - Predicates
        pre.language-javascript
          code.
            "predicates": [
              {
                "name": "tooltip", "type": "==",
                "operands": [{"signal": "tooltip._id"}, {"arg": "id"}]
              }
            ]
      +slide('cascade')
        h2 Step 13 - Tooltip - Rules
        pre.language-javascript
          code.
            {
              "type": "text",
              "properties": {
                "enter": {
                  "fill": {"value": "#000"}
                },
                "update": {
                  "x": {"value": 6},
                  "y": {"value": 14},

                  "text":{
                    "rule": [
                      {
                        "predicate": {
                          "name": "tooltip",
                          "id": {"value": null}
                        },
                        "template": ""
                      },
                      {"template":
                      "{{tooltip.date|time:'%Y-%m-%d'}}
                      ({{tooltip.version|left:1}}.{{tooltip.version|slice:1}})"}
                    ]
                  },

                  "fillOpacity": {
                    "rule": [
                      {
                        "predicate": {
                          "name": "tooltip",
                          "id": {"value": null}
                        },
                        "value": 0
                      },
                      {"value": 1}
                    ]
                  }
                }
              }
            }
      +slide('cascade')
        h1 Result - The complete story
        #vis2
      +slide('green cascade')
        h1 Now
        h1 Some gifs that always work
      +slide('horror')
        .tint
          h1 horror
      +slide('killself')
        .tint
          h1 killing myself
      +slide('clarity')
        .tint
          h1 clarity
      +slide('terrified')
        .tint
          h1 terrified
      +slide('celebration')
        .tint
          h1 @analyticboard
          h1 Jaime Andrés García



    script(src='build/build.js')
